

--------- CREATE NEW PAGES --------
1. Create "portfolios", "blogs" and "cv" page.
2. Make all of the pages class component.
3. Return just simple text "I am Blogs Page...."





------------ GET POST --------------------
1. In getInitialProps create new get request to axios to endpoint: 'https://jsonplaceholder.typicode.com/posts/:postId'
2. Get data from response and pass them to props
3. in render function of portfolio display data of post you just fetched
4. good luck (:




------------ NEW PAGE WRAPPING COMPONENT --------------------
1. In components folder create "BasePage" Functional Component
2. Return from this component <div> with className "base-page"
3. Inside Of <div> return "Container" component from "reactstrap"
4. Finaly, inside of "Container" return "props.children"
    NOTE: Don't forget to get props from argument of function
5. Wrap all of our pages inside of "BasePage", (don't do it for index page)
   e.g. <BaseLayout>
          <BasePage>
            ....
6. in main.scss create styles for base-bage, apply padding-top of 150px;
7. good luck and have fun (:





------------ NEW PAGE WRAPPING COMPONENT --------------------
1. Create new input for textarea, handleChange of this textArea and setState of "description"
2. Create  select with multiple options, handleChange of this select and setState of "language"
3. Feel free to check React Forms documentation I showed you in previous lecture.
4. Alert state with "title" , "description" and "language"
5. good luck and have fun (:





------------ PORTFOLIO MODEL --------------------
1. Create Portfolio Model similar to Book
2. Desribe this model with:
 userId: String
 title: String,
 company: String,
 location: String,
 position: String,
 description: String,
 startDate: Date
 endDate: Date
3. Good luck and have fun (:



------------ PORTFOLIO ROUTES --------------------
1. Create GET route to get all portfolios, endpoint path: '/api/v1/portfolios'
2. Create POST route to save a portfolio, endpoint path: '/api/v1/portfolios'
3. To both routes provide "checkJWT" and "checkRole('siteOwner')" middlewares
4. Separate functionality to controllers and routes folders as we did with books.
5. Get inspired by Books, functionality for portfolios is the same.
6. Good luck and have fun (:



------------ PORTFOLIO ROUTES ++ --------------------
1. Create PATCH route to update portfolio, endpoint path: '/api/v1/portfolios/:id'
2. Create DELETE route to delete portfolio, endpoint path: '/api/v1/portfolios/:id'




------------ GET ALL PORTFOLIOS --------------------
1. In actions/index.js create new function to get all portfolios, you can call it "getPortfolios",
    - Send GET request to 'http://localhost:3000/api/v1/portfolios'
    - don't forget to provide auth headers
    - Get inspired by getSecretData we created before
2. In portfolios.js Page in getInitialProps call newly created function getPortfolios
   and return fetched portfolios.
3. Refactor our page to work with portfolios
4. Display these data in render function:
  - portfolio-card-header: {portfolio.position}
  - portfolio-card-city: {portfolio.location}
  - portfolio-card-title: {portfolio.title}
  - portfolio-card-text: {portfolio.description}
5. Good luck and have fun (:


------------ BLOG MODEL --------------------
1. Create Blog Model similar to Portfolio
2. Describe this model with:
  userId: - String, required
  slug: String, unique, sparse (reseach what unique and sparse do)
  title: String, required
  subTitle: String, required
  story: String, required
  createdAt: Date, default: Date.now
  updatedAt: Date, default: Date.now
  status: String, default: 'draft'
  author: String, required
3. Good luck and have fun (:


------------ CREATE BLOG --------------------
1. Create new controller in controllers and call it blog.js
2. Create function "createBlog" and export it from controller
3. Implement funcionality to create blog, use as example save portfolio
   NOTE: provide to blog also user.name and user.sub
  e.g: blog.userId = user.sub;
       blog.author = user.name;
4. Create blog.js in "routes" folder
5. Create new POST route of path "/" and call createBlog inside and provide middlewares
6. Register routes as blogRoutes with path "/api/v1/blogs" in index.js similiary as portfolios
7. Good luck and have fun (:



------------ GET BLOG BY ID --------------------
1. Create function "getBlogById" and export it from controller
2. Implement funcionality to get Blog by id
3. Create new GET route of path "/:id" and call getBlogById inside
4. Good luck and have fun (:




------------ CREATE BLOG --------------------
1. Create function "createBlog" in actions/index.js, you can remove saveBlog
2. Send POST request with blogData to "/api/v1/blogs", similiar function as createPortfolio
3. In blogEditor.js just change function name to createBlog, implement "catch" part of function
   and setState isLoading to false
4. Good luck and have fun (:




------------ UPDATE BLOG - SERVER --------------------
1. Create function "updateBlog" and export it from controller
2. Implement funcionality to update blog, use as example update portfolio
   NOTE: add updatedAt property to blog before you will update it
   e.g. : foundBlog.updatedAt = new Date();
3. Create new PATCH route of path "/:id" and call updateBlog inside and provide middlewares
4. Good luck and have fun (:




------------ UPDATE BLOG - LITTLE HARDER (: --------------------
1. Create function "updateBlog" in actions/index.js
2. Implement funcionality to send a PATCH request to /blogs/:id,
   provide blogData and authHeaders
3. In blogEditorUpdate.js implement updateBlog function,
   you can copy saveBlog function from blogEditor.js
   NOTE: Get Blog id from this.props.blog._id, you need this id to know where to send a request
         You don't need lockId
         You don't need to redirect after successful update
4. provide updateBlog to "save" of SlateEditor
5. Test it out, create blog, do some changes try to add every block type and marking,
    updateBlog and refresh. Changes should persist.
6. Good luck and have fun (:


------------ GET BLOGS - LITTLE HARDER (: --------------------
1. Create function "getBlogs" in actions/index.js
2. Implement funcionality to send a GET request to /blogs
3. In blogs.js create getInitialProps function inside call newly created getBlogs
   and dont' forget to return fetched blogs to the page so you can get them on props.
4. Create function to map over blogs and render blogs.
5. Good luck and have fun (:










